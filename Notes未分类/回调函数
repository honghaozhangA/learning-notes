=====================js=====================
function fn() {
    setTimeout(function () {
        var data = 'Hello!';
        return data;
    }, 1000);
}
// 调用fn得到内部的data
console.log(fn()); // undefined
=====================js=====================
// 如果需要获取一个函数异步操作的结果，则必须通过回调函数来获取
function fn(callback) {
    setTimeout(function () {
        var data = 'Hello!';
        callback(data);
    }, 1000);
}
// 调用fn得到内部的data
fn(function (data) {
    console.log(data) // Hello!
});
=====================js=====================
=====================Java=====================
同步调用: 是一种阻塞式调用。
回调: 是一种双向的调用模式，被调用的接口被调用时也会调用对方的接口。
异步调用: 是一种类似消息或事件的机制，解决了同步阻塞的问题。

例：为了使我们写的函数接近完美，就把一部分功能外包给别人，让别人个性化定制，至于别人怎么实现不管，我唯一要做的就是定义好相关接口，这一设计允许了底层代码调用高层定义的子程序，增强程序灵活性，和反射有着异曲同工之妙
=====================Java=====================
