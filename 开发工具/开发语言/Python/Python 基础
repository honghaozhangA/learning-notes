####################################################
## 1. 基本操作
####################################################

python ***.py     # 即可执行py文件.
# cmd 输入 python，即可进入python命令界面，quit() 退出.
print()   # 控制台打印
input()   # 从控制台获取输入数据
len()     # 获取长度

####################################################
## 2. 基本数据类型和操作符
####################################################

# 控制台可直接进行 加减乘除取余运算.
2**3      # => 8 (2的3次方)

not True      # => False
not False     # => True

# True and False 代表1和0
True + True   # => 2
True * 8      # => 8
False - 5     # => -5

bool(0)       # => False
bool(4)       # => True
bool(-6)      # => True
0 and 2       # => 0
-5 or 0       # => -5

####################################################
## 3. 变量和集合
####################################################

# string
"Hello " + "world!"     # => "Hello world!"
"Hello " "world!"       # => "Hello world!"
"This is a string"[0]   # => 'T'

"{} can be {}".format("Strings", "interpolated")  # => "Strings can be interpolated"
"{0} be nimble, {0} be quick, {0} jump over the {1}".format("Jack", "candle stick")
"{name} wants to eat {food}".format(name="Bob", food="lasagna")  # => "Bob wants to eat lasagna"
"%s can be %s the %s way" % ("Strings", "interpolated", "old")

name = "Reiko"
f"{name} is {len(name)} characters long."

-----------------------------------------------------

# 三目运算
"yahoo!" if 3 > 2 else 2  # => "yahoo!"

-----------------------------------------------------

# Lists store sequences
li = []
other_li = [3, 4, 5]
li.append(1)    # li is now [1]
li.append(2)    # li is now [1, 2]
li.append(4)    # li is now [1, 2, 4]
li.append(3)    # li is now [1, 2, 4, 3]
# Remove from the end with pop
li.pop()        # => 3 and li is now [1, 2, 4]
li.append(3)    # li is now [1, 2, 4, 3]
li[0]           # => 1
# Look at the last element
li[-1]          # => 3
li[1:3]         # => [2, 4]
li[2:]          # => [4, 3]
li[:3]          # => [1, 2, 4]
# li[start:end:step]
li[::2]         # =>[1, 4]
li[::-1]        # => [3, 4, 2, 1]
li2 = li[:]     # => li2 = [1, 2, 4, 3], but li2 is li[:] will result in false
del li[2]       # li is now [1, 2, 3]
li.remove(2)    # 移除 "2"
li.insert(1, 2) # Index 1 插入 "2"
li.index(2)     # => 1  "2"的 Index
li + other_li   # => [1, 2, 3, 3, 4, 5]
li.extend(other_li)  # li Now is [1, 2, 3, 3, 4, 5]
1 in li         # => True

# array矩阵a
import numpy
a = numpy.array([1, 2, 3],
				[4, 5, 6],
				[7, 8, 9])
a[:, 0: 2]		# ","前代表行,后代表列, 冒号占位表示所有行, 0和 1 列
a[1, :]			# 下标为 1 的行, 所有列的内容

-----------------------------------------------------

# Tuples are like lists but are immutable.
tup = (1, 2, 3)
tup[0]          # => 1
tup[:2]         # => (1, 2)
# 长度为 1的 Tuples,元素后面必须有逗号.其他长度的则不用
type((1))       # => <class 'int'>
type((1,))      # => <class 'tuple'>
type(())        # => <class 'tuple'>
tup + (4, 5, 6) # => (1, 2, 3, 4, 5, 6)
# You can unpack tuples (or lists) into variables
a, b, c = (1, 2, 3)         # a is now 1, b is now 2 and c is now 3
a, *b, c = (1, 2, 3, 4)     # a is now 1, b is now [2, 3] and c is now 4
d, e, f = 4, 5, 6
e, d = d, e     # d is now 5 and e is now 4

-----------------------------------------------------

# Dictionaries store, mappings from keys to values, Similar to the java Map
empty_dict = {}
filled_dict = {"one": 1, "two": 2, "three": 3}
# keys are immutable types, include ints, floats, strings, tuples
invalid_dict = {[1,2,3]: "123"}     # TypeError: key is 'list'
valid_dict = {(1,2,3): [1,2,3]}
# 根据键取值
filled_dict["one"]          # => 1
filled_dict["four"]         # KeyError
# 遍历键和值
list(filled_dict.keys())    # => ["three", "two", "one"]
list(filled_dict.values())  # => [3, 2, 1]
# 只可对键 验证是否存在
"one" in filled_dict        # => True
1 in filled_dict            # => False
# Use "get()" method to avoid the KeyError
filled_dict.get("one")      # => 1
filled_dict.get("four")     # => None
# The get method supports a default value when the value is missing
filled_dict.get("one", 4)   # => 1
filled_dict.get("four", 4)  # => 4
# setdefault() 只在键不存在时才能赋值
filled_dict.setdefault("five", 5)
filled_dict.setdefault("five", 6)   # "five" is still '5'
# Adding or update
filled_dict.update({"four":4})
filled_dict[4] = 4          # ibidem
# Remove
del filled_dict["one"]
# After Python 3.5 you can also use the additional unpacking options ???
{'a': 1, **{'b': 2}}        # => {'a': 1, 'b': 2}
{'a': 1, **{'a': 2}}        # => {'a': 2}

-----------------------------------------------------

# Sets
empty_set = set()
invalid_set = {[1], 1}      # TypeError: unhashable type: 'list'
valid_set = {(1,), 1}
some_set = {1, 1, 2, 2, 3, 4}       # some_set is now {1, 2, 3, 4}
some_set.add(5)             # some_set is now {1, 2, 3, 4, 5}
other_set = {3, 4, 5, 6}
some_set & other_set        # => {3, 4, 5}
some_set | other_set        # => {1, 2, 3, 4, 5, 6}
# Do set symmetric difference with ^
{1, 2, 3, 4} ^ {2, 3, 5}    # => {1, 4, 5}
{1, 2} >= {1, 2, 3}         # => False
{1, 2} <= {1, 2, 3}         # => True
2 in filled_set             # => True

####################################################
## 4. 条件语句和迭代
####################################################

# if判断
if some_var > 10:
	print("some_var is totally bigger than 10.")
elif some_var < 10:
	print("some_var is smaller than 10.")
else:
	print("some_var is indeed 10.")

-----------------------------------------------------

# For loops
for animal in ["dog", "cat", "mouse"]:
	print("{} is a animal".format(animal))
for i in range(4):          # 0~4
for i in range(4, 8):       # 4~7
for i in range(4, 12, 3):   # 4,7,10

-----------------------------------------------------

# While
x = 0
while x < 4:
	print(x)
	x += 1

-----------------------------------------------------

# Handle exceptions with a try/except block
try:
	# Use "raise" to raise an error
	raise IndexError("This is an index error")
except IndexError as e:
	pass                    # Pass is just a no-op. Usually you would do recovery here.
except (TypeError, NameError):
	pass                    # Multiple exceptions can be handled together, if required.
else:                       # Optional clause to the try/except block. Must follow all except blocks
	print("All good!")      # Runs only if the code in try raises no exceptions
finally:                    #  Execute under all circumstances
	print("We can clean up resources here")

-----------------------------------------------------

# Iterable
filled_dict = {"one": 1, "two": 2, "three": 3}
our_iterable = filled_dict.keys()	# type: dict_keys
for i in our_iterable:
    print(i)  				# Prints one, two, three
our_iterator = iter(our_iterable)
next(our_iterator)  		# => "one"
next(our_iterator)  		# => "two"
next(our_iterator)  		# => "three"
next(our_iterator)  		# Raises StopIteration
list(filled_dict.keys())	# type: list

####################################################
## 5. 方法
####################################################

def add(x, y):
    print("x is {} and y is {}".format(x, y))
    return x, y				# 返回tuples类型值,可省略括号
add(y=6, x=5)				# 任意顺序传入参数

-----------------------------------------------------

# 方法传入多个参数写法:
def all_the_args(*tuples, **map):
    print(tuples)
    print(map)
all_the_args(1, 2, a=3, b=4)		# prints:(1, 2){"a": 3, "b": 4}
# 或调换顺序,先申明变量:
args = (1, 2, 3, 4)
kwargs = {"a": 3, "b": 4}
all_the_args(*args)
all_the_args(*args, **kwargs)

-----------------------------------------------------

# Function Scope
x = 5
def set_x(num):
    x = num    				# => 43, Local var x
    print(x)				# => 43
def set_global_x(num):
	global x				# global var x
    print(x)   				# => 5
    x = num    				# global var x is now set to 6
    print(x)   				# => 6
set_x(43)
set_global_x(6)

-----------------------------------------------------

# Python has first class functions
def create_adder(x):
    def adder(y):
        return x + y
    return adder
add_10 = create_adder(10)
add_10(3)					# x is 10, y is 3

-----------------------------------------------------

# lambda 匿名方法
(lambda x: x > 2)(3)                # => True
(lambda x, y: x ** 2 + y ** 2)(2, 1)# => 5

-----------------------------------------------------

# 内置高阶函数???
list(map((lambda x: x**2), [1, 2, 3, 4, 5]))	# map() 逐个把list里面的每个值, 放进前面方法运行 => [1, 4, 9, 16, 25]
list(map(max, [1, 2, 3], [4, 2, 1]))  			# => [4, 2, 3]
list(filter(lambda x: x > 5, [3, 4, 5, 6, 7]))  # => [6, 7]

-----------------------------------------------------

# 嵌套
[add_10(i) for i in [1, 2, 3]]					# => [11, 12, 13]
[x for x in [3, 4, 5, 6, 7] if x > 5]  			# => [6, 7]
 |
return
 |
{x for x in 'abcddeef' if x not in 'abc'}  		# => {'d', 'e', 'f'}
{x: x**2 for x in range(5)} # => {0:0, 1:1, 2:4, 3:9, 4:16}
{x: x**2 for x in range(5)}

####################################################
## 6. Modules
####################################################

# import modules
import math as m
print(math.sqrt(16))  		# => 4.0
# get specific functions from a module
from math import ceil, floor
print(ceil(3.7))   			# => 4.0
print(floor(3.7))  			# => 3.0
dir(math)

####################################################
## 7. read and write
####################################################

f = open("***.txt", "r")
g = f.read()
print(g)
f.close()

f = open("***.txt", "w")
f.write("111111")
f.write("\n")
f.close()

####################################################
## 8. Classes
####################################################



















#
